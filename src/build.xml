<?xml version="1.0"?>

<!-- ===========================================================================

                           * ================== *
                           |  How to build GEF  |
                           * ================== *

           Adaption from the FOP build.xml written by Stefano Mazzocchi
                by Giacomo Pati with some addition by Fotis Jannidis
       Adapted by Andreas Rueckert


Introduction
============

GEF is a graphical framework that can be used within different applications. It is free
and written entirely in Java. The homepage of GEF is http://gef.tigris.org

Installing the build tools
==========================

Ant is a little but very handy tool that uses a build file written in XML
(this file) as building instructions. For more information refer to
"http://jakarta.apache.org/ant/". (Essentially this is just setting ANT_HOME
to the directory where you extracted the ant-distribution, and adding
ANT_HOME/bin to your PATH.)

Additionaly you have to make sure, that the "JAVA_HOME" environment
property should be set to match the JVM you want to use. That's it.


Building instructions
=====================

First, make sure your current working directory is where this very file is
located. Then just type

ant

if everything is right and all the required packages are visible, this action
will show you a usage message.

You can have a ".ant.properties" file in your home directory (for Windows users:
this is "c:\") using which you can change certain properties, most notably the
compiler you want to use. Just add the line

build.compiler=jikes
(without a blank after "jikes"!)

to this .ant.properties file and you'll use jikes.

If you want to compile GEF, you need to have following:
- your compiler in your PATH
- JAVA_HOME correcty set to where Java2 is installed
- ANT_HOME correctly set to where ANT is installed

If something went wrong, go to the FAQ section below.

Also, you'll note that reusing a single JVM instance for each task, increases
tremendously the performance of the whole build system, compared to other
tools (i.e. make or shell scripts) where a new JVM is started for each task.



Build targets
=============

These are the meaningful targets for this build file:

 - compile -> compiles your source code to ../build/classes
 - package -> creates ../build/gef.jar
 - usage -> shows a help screen
 - dist -> generates the GEF distribution
 - dist-src -> generates the GEF source distribution
 - clean -> restores the distribution to its original and clean state

====================================== FAQ =====================================

1) Why some of the classes present in the original jar are not built anymore?

The GEF build system is very flexible: if a module requires a package that
is not present in the classpath at build time, the module is skipped but
the built process is not stopped.

2) I see a lot of warnings starting like this: "Warning: file modified in the future:"
Sometimes ant gives out this warnings, but the build is finished without any problems


============================================================================ -->

<project name="gef" default="usage" basedir=".">
  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="GEF"/>
    <property name="name" value="gef"/>
    <property name="version" value="0.13.9M1"/>
    <property name="year" value="2014"/>

    <echo message="------------------- ${Name} ${version} [${year}] ----------------"/>

    <property name="debug" value="on"/>
    <property name="optimize" value="on"/>
    <property name="deprecation" value="on"/>

    <property name="src.dir" value="../src"/>
    <property name="docs.dir" value="../docs"/>
    <property name="lib.dir" value="../lib"/>
    <property name="obj.dir" value="../lib"/>
  	<property name="tools.dir" value="../tools"/>
    <property name="dist.dir" value="../dist"/>

    <property name="manifest" value="org/tigris/gef/manifest.mf"/>

    <property name="packages" value="org.tigris.gef.* Acme.*"/>

    <property name="build.dir" value="../build"/>
    <property name="build.src" value="${src.dir}"/>
    <property name="build.dest" value="${build.dir}/classes"/>
    <property name="gef.classpath" value="${lib.dir}/commons-logging.jar:${lib.dir}/log4j-1.2.6.jar:${lib.dir}/xerces.jar:${lib.dir}/log4j-1.2.6.jar:${lib.dir}/xerces_2_5_0.jar:${lib.dir}/batik-css-1.5.1.jar:${lib.dir}/batik-dom-1.5.1.jar:${lib.dir}/batik-ext-1.5.1.jar:${lib.dir}/batik-gvt-1.5.1.jar:${lib.dir}/batik-xml-1.5.1.jar:${lib.dir}/batik-svggen-1.5.1.jar:${lib.dir}/batik-svg-dom-1.5.1.jar:${lib.dir}/batik-parser-1.5.1.jar:${lib.dir}/batik-awt-util-1.5.1.jar:${lib.dir}/batik-util-1.5.1.jar:${lib.dir}/batik-gui-util-1.5.1.jar:${lib.dir}/xml-apis.jar"/>
    
    <property file="${user.home}/.ant.properties" />
    <property name="logger" value="org.apache.commons.logging.impl.Log4JLogger"/>
    <property name="logger.configuration.name" value="log4j.configuration"/>
    <property name="logger.configuration.value" value="log4j.properties"/>
    
	<property name="tests.src" value="../tests"/>
	<property name="tests.build" value="${build.dir}/tests"/>
	<property name="tests.report" value="${build.dir}/tests-reports" />
	<path id="tests.compile.classpath">
		<pathelement path="${build.dest}"/>
		<pathelement location="${tools.dir}/junit-3.8.1/junit.jar"/>
	</path>
	<path id="tests.run.classpath">
		<pathelement path="${tests.build}"/>			
		<path refid="tests.compile.classpath" />
		<pathelement location="${lib.dir}/commons-logging.jar"/>
	</path>
	<property name="tests.pattern" value="**/**Test.java" />
  </target>

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <!--  substitution didn't work   -->
    <echo message="GEF Build file"/>
    <echo message="Requires ANT 1.2 or later."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" available targets are:"/>
    <echo message=""/>
    <echo message="   package   --> generates the gef.jar file"/>
    <echo message="   compile   --> compiles the source code"/>
    <echo message="   dist      --> generates the GEF distribution as .tar.gz and .zip"/>
    <echo message="   dist-src  --> generates the GEF source distribution as .tar.gz and .zip"/>
    <echo message="   clean     --> cleans up the directory"/>
    <echo message="   tests     --> run the JUnit tests"/>  	
    <echo message="   run       --> run instruction on where to find demos"/>
    <echo message="   usage     --> show this message (default)"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <!-- create directories -->
    <echo message="Preparing the build directories"/>
    <mkdir dir="${build.dir}"/>
    <copy todir="${build.dest}/org/tigris/gef/Images">
      <fileset dir="${build.src}/org/tigris/gef/Images" includes="**/**" excludes="CVS/**" />
    </copy>
    <copy todir="${build.dest}/org/tigris/gef/xml/dtd">
      <fileset dir="${build.src}/org/tigris/gef/xml/dtd" includes="*.dtd,*.tee,*.DTD,*.TEE" excludes="CVS/**" />
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Update from CVS                                                     -->
  <!-- =================================================================== -->
  <!-- <target name="compile" depends="prepare"> -->

  <target name="update" depends="prepare">
    <echo message="Updating from CVS "/>
    <cvs dest="${src.dir}"
     command="update"
    />
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <!-- <target name="compile" depends="prepare"> -->

  <target name="compile" depends="prepare">
    <echo message="Compiling the sources using ${build.compiler}"/>
    <!-- create directories -->
    <mkdir dir="${build.dest}"/>
    <javac target="1.5"
    	   source="1.5"
    	   srcdir="${build.src}"
           destdir="${build.dest}"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}"
           classpath="${gef.classpath}:${java.class.path}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the class package                                           -->
  <!-- =================================================================== -->
  <target name="package" depends="compile">
    <echo message="Creating the jar file ${lib.dir}/${name}.jar"/>
    <mkdir dir="${lib.dir}"/>
    <delete file="${lib.dir}/${name}.jar"/>

    <filter token="version" value="${version}"/>
    <copy todir="${build.dest}">
      <fileset dir="${build.src}" includes="**/*.properties" excludes="CVS/**" />
    </copy>
    <copy file="${src.dir}/${manifest}" tofile="${build.dir}/${manifest}" filtering="on" overwrite="on" />
    <jar jarfile="${lib.dir}/${name}.jar"
         basedir="${build.dest}"
         includes="org/tigris/gef/** Acme/**"
         excludes="${manifest}"
         manifest="${build.dir}/${manifest}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the docs                                                   -->
  <!-- =================================================================== -->
  <target name="prepare-docs" depends="init">
    <mkdir dir="${docs.dir}"/>

    <javadoc sourcepath="${build.src}" destdir="${docs.dir}" packagenames="${packages}"
        use="true"
        private="false"
        splitindex="true"
        author="false"
        windowtitle="GEF Documentation">
        <classpath>
	        <pathelement path="${lib.dir}/commons-logging.jar"/>
            <pathelement path="${lib.dir}/log4j.jar"/>
            <pathelement path="${lib.dir}/xerces.jar"/>
        </classpath>
    </javadoc>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist" depends="package">
    <echo message="Building the distribution files (zip,tar)"/>
    <mkdir dir="${dist.dir}"/>
    <copy todir="${dist.dir}">
      <fileset dir="${lib.dir}" excludes="**/classes/**, **/${ignore_this}" />
    </copy>
    <zip zipfile="${Name}-${version}-bin.zip" basedir="${dist.dir}"/>
    <tar tarfile="${Name}-${version}-bin.tar" basedir="${dist.dir}"/>
    <gzip zipfile="${Name}-${version}-bin.tar.gz" src="${Name}-${version}-bin.tar" />
    <delete file="${Name}-${version}-bin.tar"/>
    <delete dir="${dist.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the source distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist-src" depends="init">
    <echo message="Building the source distribution files (zip,tar)"/>
    <chmod file="${src.dir}/build.sh" perm="ugo+rx" />
    <delete file="${Name}-${version}-src.tar.gz"/>
    <delete file="${Name}-${version}-src.zip"/>
    <zip zipfile="${Name}-${version}-src.zip" basedir="${src.dir}" excludes="**/.*/** **/.* **/*% **/*~ **/*.shared* **/*.proj* **/*.ref.* **/*.bak GEF*"/>
    <tar tarfile="${Name}-${version}-src.tar" basedir="${src.dir}" excludes="**/.*/** **/.* **/*% **/*~ **/*.shared* **/*.proj* **/*.ref.* **/*.bak GEF*"/>
    <gzip zipfile="${Name}-${version}-src.tar.gz" src="${Name}-${version}-src.tar" />
    <delete file="${Name}-${version}-src.tar"/>
  </target>
  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete dir="${build.dir}"/>
    <delete file="${lib.dir}/gef.jar"/>
    <delete file="${src.dir}/${Name}-${version}.zip"/>
    <delete file="${src.dir}/${Name}-${version}.tar.gz"/>
    <delete file="${src.dir}/${Name}-${version}-src.zip"/>
    <delete file="${src.dir}/${Name}-${version}-src.tar.gz"/>
  </target>

  <target name="distclean" depends="clean">
    <delete dir="${dist.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Run GEF Notify from compiled sources                                   -->
  <!-- =================================================================== -->
  <target name="run" depends="package">
    <echo message="--- Executing Notify ---"/>
    <java classname="org.tigris.gef.demo.Notify" fork="yes">
          <classpath>
                <pathelement path="${build.dest};${gef.classpath};${classpath}"/>
          </classpath>
          <jvmarg value="-Dorg.apache.commons.logging.Log=${logger}"/>
          <jvmarg value="-D${logger.configuration.name}=${logger.configuration.value}"/>          
          <jvmarg value="-Dgef.log.location=${src.dir}/GEF.log"/>
          <jvmarg value="-Dgef.log.level=DEBUG"/>
    </java>
  </target>
  
  <target name="javadoc">
     <javadoc sourcepath="${build.src}"
              destdir="${docs.dir}"
              packagenames="${packages}"
              use="true"
              private="false"
              splitindex="true"
              author="false"
              windowtitle="GEF Documentation">
       <classpath>
	       <pathelement path="${lib.dir}/commons-logging.jar"/>
           <pathelement path="${lib.dir}/log4j.jar"/>
           <pathelement path="${lib.dir}/xerces.jar"/>
       </classpath>
     </javadoc>
  </target>

	<target name="compile-tests" depends="compile,init">
		<!-- create directories -->
		<mkdir dir="${tests.build}" />

		<javac srcdir="${tests.src}" destdir="${tests.build}">
			<classpath>
				<path refid="tests.compile.classpath" />
			</classpath>
		</javac>
	</target>

	<target name="tests" depends="compile-tests" 
		description="Runs JUnit tests">
		<mkdir dir="${tests.report}" />
		<junit printSummary="on" fork="false" haltonfailure="true">
			<formatter type="xml" />
			<classpath>
				<path refid="tests.run.classpath" />
			</classpath>
			<batchtest todir="${tests.report}">
				<fileset dir="${tests.src}">
					<include name="${tests.pattern}" />
				</fileset>
			</batchtest>
		</junit>
	</target>
</project>

<!-- End of file -->
